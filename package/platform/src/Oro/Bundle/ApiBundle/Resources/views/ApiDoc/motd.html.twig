{% include 'NelmioApiDocBundle::Components/motd.html.twig' %}
<script src="{{ asset('bundles/oroapi/lib/jquery.bind-first-0.2.3.min.js') }}"></script>
<script src="{{ asset('bundles/oroapi/lib/wsse.js') }}"></script>
<script type="text/javascript">
    $(function() {
        {% set user = get_current_user() %}
        var userName = {{ user ? user.username|json_encode|raw : 'null' }},
            apiKey = {{ user and user.apiKeys|first ? (user.apiKeys|first).apiKey|json_encode|raw : 'null' }},
            wsseAllowed = userName && apiKey,
            serverTime = {{ 'now'|date('c', 'UTC')|json_encode|raw }},
            clientTime = new Date(),
            serverTimeOffset = Date.parse(serverTime) - clientTime,
            apiDocLink = $('#header a').first(),
            apiDocHref = apiDocLink.attr('href'),
            apiType = window.location.pathname.substr(apiDocHref.length + 1);
        apiDocLink.after(
            '<div id="api_type" style="float: left; font-size: 1.2em; padding: 13px 16px;">type: ' +
            '<a href="' + apiDocHref + '">plain</a>' +
            '&nbsp;|&nbsp;' +
            '<a href="' + apiDocHref + '/rest_json_api">JSON.API</a>' +
            '</div>'
        );
        $('#sandbox_configuration').prepend(
            'authentication: ' +
            '<select id="authentication_type">' +
                '<option value=""' + (!wsseAllowed ? ' selected=""' : '') + '>None</option>' +
                '<option value="wsse"' + (wsseAllowed ? ' selected=""' : ' disabled=""') + '>WSSE</option>' +
            '</select>'
        );
        $('.pane.sandbox form').bindFirst('submit', function() {
            var authType = $('#authentication_type option:selected').val();
            $('.autogenerated-header', this).remove();
            if (authType === 'wsse') {
                $('.headers', this).append(
                    '<div class="tuple autogenerated-header">' +
                    '<input type="hidden" class="key" placeholder="Key" value="Authorization">' +
                    '<input type="hidden" class="value authorization-header" placeholder="Value">' +
                    '</div>' +
                    '<div class="tuple autogenerated-header">' +
                    '<input type="hidden" class="key" placeholder="Key" value="X-WSSE">' +
                    '<input type="hidden" class="value x-wsse-header" placeholder="Value">' +
                    '</div>'
                );
                $('input.authorization-header', this).val('WSSE profile="UsernameToken"');
                $('input.x-wsse-header', this).val(wsseHeader(userName, apiKey, serverTimeOffset));
            }
        });
        $('li[data-pane="sandbox"]').on('click', function() {
            /**
             * Fill input requirements: version and _format
             */
            var parameters = $(this).closest('.content').find('fieldset.parameters'),
                format = $('input.key[value="_format"]', parameters).closest('.tuple').find('input.value'),
                version = $('input.key[value="version"]', parameters).closest('.tuple').find('input.value');
            if (format.val() === '') {
                format.val('json');
            }
            if (version.val() === '') {
                version.val('latest');
            }

            /**
             * Add Header "Content-Type: application/vnd.api+json" for JSON API resources
             * (with route is not starting with '/api/rest/')
             */
            var headerKey   = 'Content-Type',
                headerValue = 'application/vnd.api+json',
                headers = $(this).closest('.content').find('fieldset.headers'),
                emptyHeader = null,
                routePath = $(this).parents('li.operation').find('div.heading span.path').text(),
                isAllowedRoute = apiType === 'rest_json_api' && routePath.indexOf('/api/rest/') === -1,
                isHeaderRequired = function () {
                    var needsHeader = true;
                    $('.tuple', headers).each(function (index, header) {
                        if ($('input.key:text[value="' + headerKey + '"]', header).length) {
                            return needsHeader = false;
                        }

                        if (!emptyHeader
                            && $('input.key:text[value=]', header).length
                            && $('input.value:text[value=]', header).length
                        ) {
                            emptyHeader = header;
                        }
                    });

                    return needsHeader;
                },
                fillHeader = function (header) {
                    $('input.key', header).val(headerKey);
                    $('input.value', header).val(headerValue);
                };

            if (isAllowedRoute && isHeaderRequired()) {
                if (emptyHeader) {
                    fillHeader(emptyHeader);
                } else {
                    $('button.add_header', headers).trigger('click');
                    fillHeader(headers.find('.tuple:last'));
                }
            }
        });
    });
</script>
