{% include 'NelmioApiDocBundle::Components/motd.html.twig' %}
<script src="{{ asset('bundles/oroapi/lib/jquery.bind-first-0.2.3.min.js') }}"></script>
<script src="{{ asset('bundles/oroapi/lib/wsse.js') }}"></script>
<script type="text/javascript">
    $(function() {
        {% set user = get_current_user() %}
        var userName = {{ user ? user.username|json_encode|raw : 'null' }},
            apiKey = {{ user and user.apiKeys|first ? (user.apiKeys|first).apiKey|json_encode|raw : 'null' }},
            wsseAllowed = userName && apiKey,
            serverTime = {{ 'now'|date('c', 'UTC')|json_encode|raw }},
            clientTime = new Date(),
            serverTimeOffset = Date.parse(serverTime) - clientTime,
            $apiDocLink = $('#header a').first(),
            apiDocHref = $apiDocLink.attr('href'),
            apiType = window.location.pathname.substr(apiDocHref.length + 1),
            escapeSelector = function (val) {
                return val.replace(/(:|\.|\[|\]|\{|\}|,)/g, "\\$1");
            },
            addHeader = function ($headers, headerKey, headerValue) {
                var needsHeader = true,
                    emptyHeader = null;
                $('.tuple', $headers).each(function (index, header) {
                    if ($('input.key:text[value="' + headerKey + '"]', header).length) {
                        needsHeader = false;
                    } else if (!emptyHeader
                        && $('input.key:text[value=]', header).length
                        && $('input.value:text[value=]', header).length
                    ) {
                        emptyHeader = header;
                    }
                });
                if (needsHeader) {
                    if (emptyHeader) {
                        fillHeader(emptyHeader, headerKey, headerValue);
                    } else {
                        $('button.add_header', $headers).trigger('click');
                        fillHeader($headers.find('.tuple:not(.autogenerated-header):last'), headerKey, headerValue);
                    }
                }
            },
            removeHeader = function ($headers, headerKey) {
                $('input.key:text[value="' + headerKey + '"]', $headers).closest('.tuple').remove();
            },
            getHeaderValue = function ($headers, headerKey) {
                return $('input.key:text[value="' + headerKey + '"]', $headers)
                    .closest('.tuple')
                    .find('input.value')
                    .val();
            },
            fillHeader = function (header, headerKey, headerValue) {
                $('input.key', header).val(headerKey);
                $('input.value', header).val(headerValue);
            };
        $apiDocLink.after(
            '<div id="api_type" style="float: left; font-size: 1.2em; padding: 13px 16px;">type: ' +
            '<a href="' + apiDocHref + '">plain</a>' +
            '&nbsp;|&nbsp;' +
            '<a href="' + apiDocHref + '/rest_json_api">JSON.API</a>' +
            '</div>'
        );

        /**
         * Add the authentication type selector
         */
        $('#sandbox_configuration').prepend(
            'authentication: ' +
            '<select id="authentication_type">' +
                '<option value=""' + (!wsseAllowed ? ' selected=""' : '') + '>None</option>' +
                '<option value="wsse"' + (wsseAllowed ? ' selected=""' : ' disabled=""') + '>WSSE</option>' +
            '</select>'
        );

        /**
         * Make JSON as default body format for JSON.API sandbox
         */
        if (apiType === 'rest_json_api') {
            $('#body_format').val('json');
        }

        /**
         * Disable the request format selector for JSON.API and new implementation of REST
         */
        if (apiType === 'rest_json_api' || apiType === 'rest_plain') {
            $('#request_format').attr('disabled','disabled');
        }

        /**
         * Add "Try!" button handler
         */
        $('.pane.sandbox form').bindFirst('submit', function() {
            var authType = $('#authentication_type option:selected').val(),
                $headers = $('.headers', this);

            /**
             * Remove auto-generated headers
             */
            $('.autogenerated-header', this).remove();

            /**
             * Add WSSE authentication related headers
             */
            if (authType === 'wsse') {
                $headers.append(
                    '<div class="tuple autogenerated-header">' +
                    '<input type="hidden" class="key" placeholder="Key" value="Authorization">' +
                    '<input type="hidden" class="value authorization-header" placeholder="Value">' +
                    '</div>' +
                    '<div class="tuple autogenerated-header">' +
                    '<input type="hidden" class="key" placeholder="Key" value="X-WSSE">' +
                    '<input type="hidden" class="value x-wsse-header" placeholder="Value">' +
                    '</div>'
                );
                $('input.authorization-header', this).val('WSSE profile="UsernameToken"');
                $('input.x-wsse-header', this).val(wsseHeader(userName, apiKey, serverTimeOffset));
            }

            /**
             * Add a header contains the id of current operation
             * It will be used in ajaxPrefilter and ajaxComplete global handlers
             */
            $headers.append(
                '<div class="tuple autogenerated-header">' +
                '<input type="hidden" class="key" value="X-API-Sandbox-Operation-ID">' +
                '<input type="hidden" class="value operation-header">' +
                '</div>'
            );
            $('input.operation-header', this).val($(this).closest('.operation').attr('id'));
        });

        /**
         * Add sandbox input data handler
         */
        $('li[data-pane="sandbox"]').on('click', function() {
            /**
             * Fill input requirements: version and _format
             */
            var parameters = $(this).closest('.content').find('fieldset.parameters'),
                format = $('input.key[value="_format"]', parameters).closest('.tuple').find('input.value'),
                version = $('input.key[value="version"]', parameters).closest('.tuple').find('input.value');
            if (format.val() === '') {
                format.val('json');
            }
            if (version.val() === '') {
                version.val('latest');
            }

            /**
             * Add Header "Content-Type: application/vnd.api+json" for JSON.API resources
             */
            var $headers = $(this).closest('.content').find('fieldset.headers'),
                routePath = $(this).parents('li.operation').find('div.heading span.path').text(),
                isAllowedRoute = apiType === 'rest_json_api' && routePath.indexOf('/api/rest/') === -1;
            if (isAllowedRoute) {
                addHeader($headers, 'Content-Type', 'application/vnd.api+json');
            }
        });

        /**
         * Add the operators selector for filters
         */
        $('.toggler').on('click', function() {
            var $container = $(this).closest('.operation'),
                $form = $container.find('.pane.sandbox form');
            $container.find('.pane.content>table>tbody table td:contains(Operators)').each(function (index, el) {
                var $el = $(el),
                    filterId = $el.closest('table').parent().prev().text(),
                    operators = $el.next().text(),
                    options = '',
                    $operatorEl = null;
                if (filterId) {
                    $operatorEl = $form.find("input.key[value='" + escapeSelector(filterId) + "']").next();
                    if ($operatorEl.length && $operatorEl.prop("tagName") == 'SPAN' && $operatorEl.text() == '=') {
                        operators = operators.split(',');
                        for (var i = 0; i < operators.length; i++) {
                            options += '<option value="' + operators[i] + '">' + operators[i] + '</option>'
                        }
                        $operatorEl.replaceWith('<select class="operator">' + options + '</select>');
                    }
                }
            });
        });

        /**
         * A handler to add operators to the sandbox AJAX requests
         */
        $.ajaxPrefilter(function(options) {
            if (options.headers['X-API-Sandbox-Operation-ID'] === undefined) {
                return;
            }

            /**
             * Replace "=" operator with the operator selected by an user
             */
            var operationId = escapeSelector(options.headers['X-API-Sandbox-Operation-ID']);
            $('.pane.sandbox form .parameters .tuple', $('#' + operationId)).each(function() {
                var key = $('.key', $(this)).val(),
                    operator = $('.operator', $(this)).val(),
                    value = $('.value', $(this)).val(),
                    data, obj, keyPair;
                if (value !== '' && operator !== undefined && operator !== '=' && !jQuery.isEmptyObject(options.data)) {
                    if (options.data.lastIndexOf('{"', 0) === 0) {
                        // json
                        data = JSON.parse(options.data);
                        keyPair = key.match(/^(.+)\[([^\]]+)\]$/);
                        obj = {};
                        if(keyPair) {
                            if (data.hasOwnProperty(keyPair[1]) && data[keyPair[1]].hasOwnProperty(keyPair[2])) {
                                obj[operator] = data[keyPair[1]][keyPair[2]];
                                data[keyPair[1]][keyPair[2]] = obj;
                            }
                        } else if (data.hasOwnProperty(key)) {
                            obj[operator] = data[key];
                            data[key] = obj;
                        }
                        options.data = JSON.stringify(data);
                    } else {
                        // uri string
                        options.data = options.data.replace(
                            new RegExp("([\?&])?(" + encodeURIComponent(key) + ")="), "$1$2" + operator
                        );
                    }
                }
            });

            /**
             * Remove "_format" parameter for JSON.API and new implementation of REST sandboxes
             */
            if (apiType === 'rest_json_api' || apiType === 'rest_plain') {
                options.url = options.url.replace(
                    new RegExp("([\?&])(_format=json&?)"), "$1"
                );
                if (options.data.lastIndexOf('{"', 0) === 0) {
                    // json
                    var data = JSON.parse(options.data);
                    if (data.hasOwnProperty('_format')) {
                        delete data['_format'];
                        options.data = JSON.stringify(data);
                    }
                } else {
                    // uri string
                    options.data = options.data.replace(
                        new RegExp("([&]?)(_format=json&?)"), "$1"
                    );
                }
            }
        });

        /**
         * A handler to correct a result of the sandbox AJAX requests
         */
        $(document).ajaxComplete(function(event, jqXHR, options) {
            if (options.type != 'GET' || options.headers['X-API-Sandbox-Operation-ID'] === undefined) {
                return;
            }

            /**
             * Update "Request URL" section
             */
            var operationId = escapeSelector(options.headers['X-API-Sandbox-Operation-ID']);
            $('.pane.sandbox .result .url', $('#' + operationId)).text(
                options.type + ' ' + decodeURIComponent(options.url)
            );
        });
    });
</script>
