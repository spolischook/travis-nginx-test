{% import 'OroDataGridBundle::macros.html.twig' as dataGrid %}
<div class="widget-content grid-widget-content">
    {% set gridName = oro_datagrid_build_fullname('entity-relation-grid', entity_name ~ '-' ~  field_name) %}

    {% set gridParams = {
        '_parameters' : {
            'data_in': app.request.get('added') ? app.request.get('added')|split(',') : [],
            'data_not_in': app.request.get('removed') ? app.request.get('removed')|split(',') : []
        },
        'class_name': entity_class,
        'field_name': field_name,
        'id': id
    } %}

    <style type="text/css">
        .grid-widget-content .grid, .grid-widget-content .table{margin-bottom: 0;}
    </style>

    {% block content %}
        {{ dataGrid.renderGrid(gridName, gridParams) }}
        <input type="hidden" name="appendRelation" id="appendRelation" value="{{ app.request.get('added') }}" />
        <input type="hidden" name="removeRelation" id="removeRelation" value="{{ app.request.get('removed') }}" />
    {% endblock %}

    <script type="text/javascript">
        {% set wid = app.request.get('_wid') %}
        require(['jquery', 'routing', 'orodatagrid/js/datagrid/listener/callback-listener', 'oroui/js/widget-manager',
            'oroform/js/multiple-entity/model'],
        function($, routing, CallbackListener, WidgetManager, MultipleEntityModel) {
            var addedModels = {};
            WidgetManager.getWidgetInstance({{ wid|json_encode|raw }}, function(widget) {
                widget.getAction('select', 'adopted', function(selectBtn) {
                    selectBtn.click(function() {
                        var addedVal = $('#appendRelation').val();
                        var removedVal = $('#removeRelation').val();
                        var appendedIds = addedVal.length ? addedVal.split(',') : [];
                        var removedIds = removedVal.length ? removedVal.split(',') : [];
                        widget.trigger('completeSelection', appendedIds, addedModels, removedIds);
                    });
                });
            });

            var gridName = {{ gridName|json_encode|raw }};

            $(function() {
                /** @type {orodatagrid.datagrid.listener.CallbackListener} */
                new CallbackListener({
                    $gridContainer: $('[data-wid="{{ wid }}"]'),
                    gridName: gridName,
                    dataField: 'id',
                    columnName: 'assigned',
                    processCallback: function (value, model, listener) {
                        var isActive = model.get(listener.columnName);
                        var id = model.get('id');
                        if (isActive) {
                            var label = '';

                            {% set label = '' %}
                            {% for fieldName in relation.get('target_title') %}
                                var field = model.get('{{ fieldName }}');
                                if (field) {
                                    label += field + ' ';
                                }
                            {% endfor %}

                            addedModels[id] = new MultipleEntityModel({
                                'id': model.get('id'),
                                'link': routing.generate(
                                        'oro_entity_detailed',
                                        {
                                            id: model.get('id'),
                                            entityName: '{{ entity_class|replace('\\', '_') }}',
                                            fieldName: '{{ field_name }}'
                                        }
                                ),
                                'label': label,
                                'extraData':
                                [
                                    {% for fieldName in relation.get('target_grid') %}
                                    {
                                        'label': '{{ entity_provider.getConfig(relation.get('target_entity'), fieldName).get('label')|trans }}',
                                        'value': model.get('{{ fieldName }}')
                                    },
                                    {% endfor %}
                                ]
                            });
                        } else if (addedModels.hasOwnProperty(id)) {
                            delete addedModels[id];
                        }
                    }
                });
            });
        });
    </script>

    <div class="widget-actions">
        <button type="reset" class="btn">{{ 'Cancel'|trans }}</button>
        <button type="button" class="btn btn-primary" data-action-name="select">{{ 'Select'|trans }}</button>
    </div>
</div>
