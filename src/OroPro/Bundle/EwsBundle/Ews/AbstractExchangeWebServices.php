<?php

namespace OroPro\Bundle\EwsBundle\Ews;

use OroPro\Bundle\EwsBundle\Ews\EwsType as EwsType;
use \SoapClient;

// @codingStandardsIgnoreStart
/**
 * The ExchangeWebServices class provides a base for SOAP client
 *
 * @abstract
 *
 * @ignore This code was generated by a tool.
 *         Changes to this file may cause incorrect behaviour and will be lost if
 *         the code is regenerated.
 * @SuppressWarnings(PHPMD)
 */
abstract class AbstractExchangeWebServices
{
    /**
     * Default class map for wsdl=>php
     *
     * @access private
     * @var array
     */
    private static $classmap = array(
        "MailboxCultureType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MailboxCultureType",
        "SidAndAttributesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SidAndAttributesType",
        "NonEmptyArrayOfGroupIdentifiersType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfGroupIdentifiersType",
        "NonEmptyArrayOfRestrictedGroupIdentifiersType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfRestrictedGroupIdentifiersType",
        "SerializedSecurityContextType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SerializedSecurityContextType",
        "ConnectingSIDType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ConnectingSIDType",
        "ExchangeImpersonationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ExchangeImpersonationType",
        "OpenAsAdminOrSystemServiceType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\OpenAsAdminOrSystemServiceType",
        "ProxySecurityContextType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ProxySecurityContextType",
        "ServerVersionInfo" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ServerVersionInfo",
        "RequestServerVersion" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RequestServerVersion",
        "BaseEmailAddressType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseEmailAddressType",
        "EmailAddressType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\EmailAddressType",
        "ArrayOfEmailAddressesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfEmailAddressesType",
        "DirectoryEntryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DirectoryEntryType",
        "RoomType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RoomType",
        "ArrayOfRoomsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfRoomsType",
        "ArrayOfRecipientsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfRecipientsType",
        "SingleRecipientType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SingleRecipientType",
        "BasePathToElementType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BasePathToElementType",
        "PathToUnindexedFieldType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PathToUnindexedFieldType",
        "PathToIndexedFieldType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PathToIndexedFieldType",
        "PathToExceptionFieldType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PathToExceptionFieldType",
        "PathToExtendedFieldType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PathToExtendedFieldType",
        "NonEmptyArrayOfPathsToElementType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfPathsToElementType",
        "NonEmptyArrayOfPropertyValuesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfPropertyValuesType",
        "ExtendedPropertyType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ExtendedPropertyType",
        "FolderResponseShapeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FolderResponseShapeType",
        "ItemResponseShapeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ItemResponseShapeType",
        "AttachmentResponseShapeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AttachmentResponseShapeType",
        "ChangeDescriptionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ChangeDescriptionType",
        "ItemChangeDescriptionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ItemChangeDescriptionType",
        "FolderChangeDescriptionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FolderChangeDescriptionType",
        "SetItemFieldType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SetItemFieldType",
        "SetFolderFieldType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SetFolderFieldType",
        "DeleteItemFieldType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteItemFieldType",
        "DeleteFolderFieldType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteFolderFieldType",
        "AppendToItemFieldType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AppendToItemFieldType",
        "AppendToFolderFieldType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AppendToFolderFieldType",
        "NonEmptyArrayOfItemChangeDescriptionsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfItemChangeDescriptionsType",
        "NonEmptyArrayOfFolderChangeDescriptionsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfFolderChangeDescriptionsType",
        "ItemChangeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ItemChangeType",
        "NonEmptyArrayOfItemChangesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfItemChangesType",
        "InternetHeaderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\InternetHeaderType",
        "NonEmptyArrayOfInternetHeadersType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfInternetHeadersType",
        "RequestAttachmentIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RequestAttachmentIdType",
        "AttachmentIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AttachmentIdType",
        "RootItemIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RootItemIdType",
        "NonEmptyArrayOfRequestAttachmentIdsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfRequestAttachmentIdsType",
        "AttachmentType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AttachmentType",
        "ItemAttachmentType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ItemAttachmentType",
        "SyncFolderItemsCreateOrUpdateType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderItemsCreateOrUpdateType",
        "FileAttachmentType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FileAttachmentType",
        "ArrayOfAttachmentsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfAttachmentsType",
        "NonEmptyArrayOfAttachmentsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfAttachmentsType",
        "BodyType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BodyType",
        "BaseFolderIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseFolderIdType",
        "DistinguishedFolderIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DistinguishedFolderIdType",
        "FolderIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FolderIdType",
        "NonEmptyArrayOfBaseFolderIdsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfBaseFolderIdsType",
        "TargetFolderIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TargetFolderIdType",
        "NonEmptyArrayOfUploadItemsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfUploadItemsType",
        "UploadItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UploadItemType",
        "FindFolderParentType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindFolderParentType",
        "BaseFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseFolderType",
        "ManagedFolderInformationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ManagedFolderInformationType",
        "FolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FolderType",
        "CalendarFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CalendarFolderType",
        "ContactsFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ContactsFolderType",
        "SearchFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SearchFolderType",
        "TasksFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TasksFolderType",
        "NonEmptyArrayOfFoldersType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfFoldersType",
        "ArrayOfFoldersType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfFoldersType",
        "BaseItemIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseItemIdType",
        "ItemIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ItemIdType",
        "NonEmptyArrayOfBaseItemIdsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfBaseItemIdsType",
        "ArrayOfBaseItemIdsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfBaseItemIdsType",
        "NonEmptyArrayOfItemIdsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfItemIdsType",
        "ResponseObjectCoreType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ResponseObjectCoreType",
        "ResponseObjectType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ResponseObjectType",
        "NonEmptyArrayOfResponseObjectsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfResponseObjectsType",
        "FolderChangeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FolderChangeType",
        "NonEmptyArrayOfFolderChangesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfFolderChangesType",
        "WellKnownResponseObjectType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\WellKnownResponseObjectType",
        "SmartResponseBaseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SmartResponseBaseType",
        "SmartResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SmartResponseType",
        "ReplyToItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ReplyToItemType",
        "ReplyAllToItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ReplyAllToItemType",
        "ForwardItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ForwardItemType",
        "CancelCalendarItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CancelCalendarItemType",
        "ReferenceItemResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ReferenceItemResponseType",
        "SuppressReadReceiptType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SuppressReadReceiptType",
        "FindItemParentType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindItemParentType",
        "ItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ItemType",
        "ArrayOfItemClassType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfItemClassType",
        "ConversationActionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ConversationActionType",
        "NonEmptyArrayOfApplyConversationActionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfApplyConversationActionType",
        "ConversationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ConversationType",
        "ArrayOfConversationsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfConversationsType",
        "ArrayOfStringsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfStringsType",
        "ArrayOfRealItemsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfRealItemsType",
        "NonEmptyArrayOfAllItemsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfAllItemsType",
        "AcceptItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AcceptItemType",
        "TentativelyAcceptItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TentativelyAcceptItemType",
        "DeclineItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeclineItemType",
        "RemoveItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RemoveItemType",
        "PostReplyItemBaseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PostReplyItemBaseType",
        "PostReplyItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PostReplyItemType",
        "MimeContentType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MimeContentType",
        "MessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MessageType",
        "TaskType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TaskType",
        "PostItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PostItemType",
        "BasePagingType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BasePagingType",
        "IndexedPageViewType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\IndexedPageViewType",
        "FractionalPageViewType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FractionalPageViewType",
        "CalendarViewType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CalendarViewType",
        "ContactsViewType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ContactsViewType",
        "ResolutionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ResolutionType",
        "ArrayOfResolutionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfResolutionType",
        "ArrayOfDLExpansionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfDLExpansionType",
        "NonEmptyArrayOfTimeZoneIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfTimeZoneIdType",
        "ArrayOfTimeZoneDefinitionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfTimeZoneDefinitionType",
        "AttendeeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AttendeeType",
        "NonEmptyArrayOfAttendeesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfAttendeesType",
        "OccurrenceItemIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\OccurrenceItemIdType",
        "RecurringMasterItemIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RecurringMasterItemIdType",
        "RecurrencePatternBaseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RecurrencePatternBaseType",
        "IntervalRecurrencePatternBaseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\IntervalRecurrencePatternBaseType",
        "RegeneratingPatternBaseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RegeneratingPatternBaseType",
        "DailyRegeneratingPatternType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DailyRegeneratingPatternType",
        "WeeklyRegeneratingPatternType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\WeeklyRegeneratingPatternType",
        "MonthlyRegeneratingPatternType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MonthlyRegeneratingPatternType",
        "YearlyRegeneratingPatternType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\YearlyRegeneratingPatternType",
        "RelativeYearlyRecurrencePatternType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RelativeYearlyRecurrencePatternType",
        "AbsoluteYearlyRecurrencePatternType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AbsoluteYearlyRecurrencePatternType",
        "RelativeMonthlyRecurrencePatternType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RelativeMonthlyRecurrencePatternType",
        "AbsoluteMonthlyRecurrencePatternType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AbsoluteMonthlyRecurrencePatternType",
        "WeeklyRecurrencePatternType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\WeeklyRecurrencePatternType",
        "DailyRecurrencePatternType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DailyRecurrencePatternType",
        "TimeChangeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TimeChangeType",
        "TimeZoneType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TimeZoneType",
        "TimeZoneContextType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TimeZoneContextType",
        "TransitionTargetType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TransitionTargetType",
        "TransitionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TransitionType",
        "AbsoluteDateTransitionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AbsoluteDateTransitionType",
        "RecurringTimeTransitionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RecurringTimeTransitionType",
        "RecurringDateTransitionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RecurringDateTransitionType",
        "RecurringDayTransitionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RecurringDayTransitionType",
        "TimeZoneDefinitionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TimeZoneDefinitionType",
        "NonEmptyArrayOfPeriodsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfPeriodsType",
        "PeriodType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PeriodType",
        "ArrayOfTransitionsGroupsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfTransitionsGroupsType",
        "ArrayOfTransitionsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfTransitionsType",
        "RecurrenceRangeBaseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RecurrenceRangeBaseType",
        "NoEndRecurrenceRangeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NoEndRecurrenceRangeType",
        "EndDateRecurrenceRangeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\EndDateRecurrenceRangeType",
        "NumberedRecurrenceRangeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NumberedRecurrenceRangeType",
        "RecurrenceType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RecurrenceType",
        "TaskRecurrenceType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TaskRecurrenceType",
        "OccurrenceInfoType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\OccurrenceInfoType",
        "NonEmptyArrayOfOccurrenceInfoType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfOccurrenceInfoType",
        "DeletedOccurrenceInfoType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeletedOccurrenceInfoType",
        "NonEmptyArrayOfDeletedOccurrencesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfDeletedOccurrencesType",
        "CalendarItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CalendarItemType",
        "MeetingMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MeetingMessageType",
        "MeetingRequestMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MeetingRequestMessageType",
        "MeetingResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MeetingResponseMessageType",
        "MeetingCancellationMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MeetingCancellationMessageType",
        "CompleteNameType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CompleteNameType",
        "ImAddressDictionaryEntryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ImAddressDictionaryEntryType",
        "EmailAddressDictionaryEntryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\EmailAddressDictionaryEntryType",
        "PhoneNumberDictionaryEntryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PhoneNumberDictionaryEntryType",
        "PhysicalAddressDictionaryEntryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PhysicalAddressDictionaryEntryType",
        "ImAddressDictionaryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ImAddressDictionaryType",
        "EmailAddressDictionaryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\EmailAddressDictionaryType",
        "PhoneNumberDictionaryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PhoneNumberDictionaryType",
        "PhysicalAddressDictionaryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PhysicalAddressDictionaryType",
        "MembersListType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MembersListType",
        "MemberType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MemberType",
        "ContactItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ContactItemType",
        "ArrayOfBinaryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfBinaryType",
        "DistributionListType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DistributionListType",
        "SearchParametersType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SearchParametersType",
        "ConstantValueType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ConstantValueType",
        "SearchExpressionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SearchExpressionType",
        "AggregateOnType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AggregateOnType",
        "BaseGroupByType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseGroupByType",
        "GroupByType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GroupByType",
        "DistinguishedGroupByType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DistinguishedGroupByType",
        "GroupedItemsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GroupedItemsType",
        "ArrayOfGroupedItemsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfGroupedItemsType",
        "ExistsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ExistsType",
        "FieldURIOrConstantType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FieldURIOrConstantType",
        "TwoOperandExpressionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TwoOperandExpressionType",
        "ExcludesValueType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ExcludesValueType",
        "ExcludesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ExcludesType",
        "IsEqualToType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\IsEqualToType",
        "IsNotEqualToType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\IsNotEqualToType",
        "IsGreaterThanType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\IsGreaterThanType",
        "IsGreaterThanOrEqualToType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\IsGreaterThanOrEqualToType",
        "IsLessThanType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\IsLessThanType",
        "IsLessThanOrEqualToType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\IsLessThanOrEqualToType",
        "ContainsExpressionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ContainsExpressionType",
        "NotType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NotType",
        "MultipleOperandBooleanExpressionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MultipleOperandBooleanExpressionType",
        "AndType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AndType",
        "OrType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\OrType",
        "RestrictionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RestrictionType",
        "FieldOrderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FieldOrderType",
        "NonEmptyArrayOfFieldOrdersType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfFieldOrdersType",
        "NonEmptyArrayOfFolderNamesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfFolderNamesType",
        "BaseNotificationEventType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseNotificationEventType",
        "BaseObjectChangedEventType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseObjectChangedEventType",
        "ModifiedEventType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ModifiedEventType",
        "MovedCopiedEventType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MovedCopiedEventType",
        "NotificationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NotificationType",
        "NonEmptyArrayOfNotificationEventTypesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfNotificationEventTypesType",
        "BaseSubscriptionRequestType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseSubscriptionRequestType",
        "PushSubscriptionRequestType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PushSubscriptionRequestType",
        "PullSubscriptionRequestType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PullSubscriptionRequestType",
        "StreamingSubscriptionRequestType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\StreamingSubscriptionRequestType",
        "NonEmptyArrayOfSubscriptionIdsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfSubscriptionIdsType",
        "NonEmptyArrayOfNotificationsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfNotificationsType",
        "SyncFolderItemsDeleteType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderItemsDeleteType",
        "SyncFolderItemsReadFlagType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderItemsReadFlagType",
        "SyncFolderItemsChangesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderItemsChangesType",
        "SyncFolderHierarchyCreateOrUpdateType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderHierarchyCreateOrUpdateType",
        "SyncFolderHierarchyDeleteType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderHierarchyDeleteType",
        "SyncFolderHierarchyChangesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderHierarchyChangesType",
        "RequestTypeHeader" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RequestTypeHeader",
        "CalendarEventDetails" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CalendarEventDetails",
        "CalendarEvent" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CalendarEvent",
        "ArrayOfCalendarEvent" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfCalendarEvent",
        "Duration" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\Duration",
        "EmailAddress" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\EmailAddress",
        "FreeBusyViewOptionsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FreeBusyViewOptionsType",
        "WorkingPeriod" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\WorkingPeriod",
        "ArrayOfWorkingPeriod" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfWorkingPeriod",
        "SerializableTimeZoneTime" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SerializableTimeZoneTime",
        "SerializableTimeZone" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SerializableTimeZone",
        "WorkingHours" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\WorkingHours",
        "FreeBusyView" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FreeBusyView",
        "MailboxData" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MailboxData",
        "ArrayOfMailboxData" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfMailboxData",
        "SuggestionsViewOptionsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SuggestionsViewOptionsType",
        "ArrayOfAttendeeConflictData" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfAttendeeConflictData",
        "AttendeeConflictData" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AttendeeConflictData",
        "UnknownAttendeeConflictData" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UnknownAttendeeConflictData",
        "TooBigGroupAttendeeConflictData" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TooBigGroupAttendeeConflictData",
        "IndividualAttendeeConflictData" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\IndividualAttendeeConflictData",
        "GroupAttendeeConflictData" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GroupAttendeeConflictData",
        "Suggestion" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\Suggestion",
        "ArrayOfSuggestion" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfSuggestion",
        "SuggestionDayResult" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SuggestionDayResult",
        "ArrayOfSuggestionDayResult" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfSuggestionDayResult",
        "ReplyBody" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ReplyBody",
        "UserOofSettings" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UserOofSettings",
        "Value" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\Value",
        "AlternateIdBaseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AlternateIdBaseType",
        "AlternateIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AlternateIdType",
        "AlternatePublicFolderIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AlternatePublicFolderIdType",
        "AlternatePublicFolderItemIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AlternatePublicFolderItemIdType",
        "NonEmptyArrayOfAlternateIdsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\NonEmptyArrayOfAlternateIdsType",
        "UserIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UserIdType",
        "ArrayOfPermissionsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfPermissionsType",
        "ArrayOfCalendarPermissionsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfCalendarPermissionsType",
        "ArrayOfUnknownEntriesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfUnknownEntriesType",
        "BasePermissionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BasePermissionType",
        "PermissionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PermissionType",
        "CalendarPermissionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CalendarPermissionType",
        "PermissionSetType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PermissionSetType",
        "CalendarPermissionSetType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CalendarPermissionSetType",
        "EffectiveRightsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\EffectiveRightsType",
        "ArrayOfDelegateUserType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfDelegateUserType",
        "ArrayOfUserIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfUserIdType",
        "DelegateUserType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DelegateUserType",
        "DelegatePermissionsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DelegatePermissionsType",
        "ConflictResultsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ConflictResultsType",
        "OutOfOfficeMailTip" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\OutOfOfficeMailTip",
        "SmtpDomainList" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SmtpDomainList",
        "SmtpDomain" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SmtpDomain",
        "MailTips" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MailTips",
        "ServiceConfiguration" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ServiceConfiguration",
        "MailTipsServiceConfiguration" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MailTipsServiceConfiguration",
        "UnifiedMessageServiceConfiguration" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UnifiedMessageServiceConfiguration",
        "ArrayOfSmtpAddressType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfSmtpAddressType",
        "ArrayOfEncryptedSharedFolderDataType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfEncryptedSharedFolderDataType",
        "EncryptedSharedFolderDataType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\EncryptedSharedFolderDataType",
        "EncryptedDataContainerType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\EncryptedDataContainerType",
        "ArrayOfInvalidRecipientsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfInvalidRecipientsType",
        "InvalidRecipientType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\InvalidRecipientType",
        "AcceptSharingInvitationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AcceptSharingInvitationType",
        "PhoneCallIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PhoneCallIdType",
        "PhoneCallInformationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PhoneCallInformationType",
        "UserConfigurationNameType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UserConfigurationNameType",
        "UserConfigurationDictionaryObjectType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UserConfigurationDictionaryObjectType",
        "UserConfigurationDictionaryEntryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UserConfigurationDictionaryEntryType",
        "UserConfigurationDictionaryType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UserConfigurationDictionaryType",
        "UserConfigurationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UserConfigurationType",
        "ProtectionRulesServiceConfiguration" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ProtectionRulesServiceConfiguration",
        "ArrayOfProtectionRulesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfProtectionRulesType",
        "ProtectionRuleType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ProtectionRuleType",
        "ProtectionRuleConditionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ProtectionRuleConditionType",
        "ProtectionRuleAndType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ProtectionRuleAndType",
        "ProtectionRuleRecipientIsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ProtectionRuleRecipientIsType",
        "ProtectionRuleSenderDepartmentsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ProtectionRuleSenderDepartmentsType",
        "ProtectionRuleActionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ProtectionRuleActionType",
        "ProtectionRuleArgumentType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ProtectionRuleArgumentType",
        "FindMessageTrackingSearchResultType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindMessageTrackingSearchResultType",
        "ArrayOfFindMessageTrackingSearchResultType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfFindMessageTrackingSearchResultType",
        "RecipientTrackingEventType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RecipientTrackingEventType",
        "MessageTrackingReportType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MessageTrackingReportType",
        "TrackingPropertyType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\TrackingPropertyType",
        "ArrayOfTrackingPropertiesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfTrackingPropertiesType",
        "ArrayOfArraysOfTrackingPropertiesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfArraysOfTrackingPropertiesType",
        "ArrayOfRecipientTrackingEventType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfRecipientTrackingEventType",
        "RulePredicateSizeRangeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RulePredicateSizeRangeType",
        "RulePredicateDateRangeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RulePredicateDateRangeType",
        "RulePredicatesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RulePredicatesType",
        "RuleActionsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RuleActionsType",
        "RuleType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RuleType",
        "ArrayOfRulesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfRulesType",
        "RuleValidationErrorType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RuleValidationErrorType",
        "ArrayOfRuleValidationErrorsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfRuleValidationErrorsType",
        "RuleOperationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RuleOperationType",
        "ArrayOfRuleOperationsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfRuleOperationsType",
        "CreateRuleOperationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CreateRuleOperationType",
        "SetRuleOperationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SetRuleOperationType",
        "DeleteRuleOperationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteRuleOperationType",
        "RuleOperationErrorType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RuleOperationErrorType",
        "ArrayOfRuleOperationErrorsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfRuleOperationErrorsType",
        "ArrayOfSearchItemKindsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfSearchItemKindsType",
        "UserMailboxType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UserMailboxType",
        "ArrayOfUserMailboxesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfUserMailboxesType",
        "KeywordStatisticsSearchResultType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\KeywordStatisticsSearchResultType",
        "MailboxStatisticsSearchResultType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MailboxStatisticsSearchResultType",
        "ResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ResponseMessageType",
        "MessageXml" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MessageXml",
        "ArrayOfResponseMessagesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfResponseMessagesType",
        "BaseResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseResponseMessageType",
        "BaseRequestType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseRequestType",
        "GetFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetFolderType",
        "UploadItemsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UploadItemsType",
        "UploadItemsResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UploadItemsResponseMessageType",
        "UploadItemsResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UploadItemsResponseType",
        "ExportItemsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ExportItemsType",
        "ExportItemsResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ExportItemsResponseMessageType",
        "ExportItemsResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ExportItemsResponseType",
        "CreateFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CreateFolderType",
        "FindFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindFolderType",
        "FolderInfoResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FolderInfoResponseMessageType",
        "FindFolderResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindFolderResponseMessageType",
        "FindFolderResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindFolderResponseType",
        "DeleteFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteFolderType",
        "DeleteFolderResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteFolderResponseType",
        "EmptyFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\EmptyFolderType",
        "EmptyFolderResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\EmptyFolderResponseType",
        "BaseMoveCopyFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseMoveCopyFolderType",
        "MoveFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MoveFolderType",
        "CopyFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CopyFolderType",
        "UpdateFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UpdateFolderType",
        "CreateFolderResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CreateFolderResponseType",
        "GetFolderResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetFolderResponseType",
        "UpdateFolderResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UpdateFolderResponseType",
        "MoveFolderResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MoveFolderResponseType",
        "CopyFolderResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CopyFolderResponseType",
        "GetItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetItemType",
        "CreateItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CreateItemType",
        "UpdateItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UpdateItemType",
        "ItemInfoResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ItemInfoResponseMessageType",
        "UpdateItemResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UpdateItemResponseMessageType",
        "DeleteItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteItemType",
        "AttachmentInfoResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AttachmentInfoResponseMessageType",
        "DeleteAttachmentResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteAttachmentResponseMessageType",
        "BaseMoveCopyItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseMoveCopyItemType",
        "MoveItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MoveItemType",
        "CopyItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CopyItemType",
        "SendItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SendItemType",
        "SendItemResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SendItemResponseType",
        "FindItemType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindItemType",
        "FindConversationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindConversationType",
        "FindConversationResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindConversationResponseMessageType",
        "ApplyConversationActionType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ApplyConversationActionType",
        "ApplyConversationActionResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ApplyConversationActionResponseType",
        "CreateAttachmentType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CreateAttachmentType",
        "CreateAttachmentResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CreateAttachmentResponseType",
        "DeleteAttachmentType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteAttachmentType",
        "DeleteAttachmentResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteAttachmentResponseType",
        "GetAttachmentType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetAttachmentType",
        "GetAttachmentResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetAttachmentResponseType",
        "CreateItemResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CreateItemResponseType",
        "UpdateItemResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UpdateItemResponseType",
        "GetItemResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetItemResponseType",
        "MoveItemResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MoveItemResponseType",
        "CopyItemResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CopyItemResponseType",
        "DeleteItemResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteItemResponseType",
        "FindItemResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindItemResponseMessageType",
        "FindItemResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindItemResponseType",
        "ResolveNamesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ResolveNamesType",
        "ResolveNamesResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ResolveNamesResponseMessageType",
        "ResolveNamesResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ResolveNamesResponseType",
        "GetPasswordExpirationDateType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetPasswordExpirationDateType",
        "GetPasswordExpirationDateResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetPasswordExpirationDateResponseMessageType",
        "GetMailTipsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetMailTipsType",
        "GetMailTipsResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetMailTipsResponseMessageType",
        "ArrayOfMailTipsResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfMailTipsResponseMessageType",
        "MailTipsResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\MailTipsResponseMessageType",
        "PlayOnPhoneType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PlayOnPhoneType",
        "PlayOnPhoneResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\PlayOnPhoneResponseMessageType",
        "GetPhoneCallInformationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetPhoneCallInformationType",
        "GetPhoneCallInformationResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetPhoneCallInformationResponseMessageType",
        "DisconnectPhoneCallType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DisconnectPhoneCallType",
        "DisconnectPhoneCallResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DisconnectPhoneCallResponseMessageType",
        "ExpandDLType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ExpandDLType",
        "ExpandDLResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ExpandDLResponseMessageType",
        "ExpandDLResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ExpandDLResponseType",
        "GetServerTimeZonesType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetServerTimeZonesType",
        "GetServerTimeZonesResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetServerTimeZonesResponseMessageType",
        "GetServerTimeZonesResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetServerTimeZonesResponseType",
        "CreateManagedFolderRequestType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CreateManagedFolderRequestType",
        "CreateManagedFolderResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CreateManagedFolderResponseType",
        "SubscribeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SubscribeType",
        "SubscribeResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SubscribeResponseMessageType",
        "SubscribeResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SubscribeResponseType",
        "UnsubscribeType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UnsubscribeType",
        "UnsubscribeResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UnsubscribeResponseType",
        "GetEventsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetEventsType",
        "GetEventsResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetEventsResponseMessageType",
        "GetEventsResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetEventsResponseType",
        "GetStreamingEventsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetStreamingEventsType",
        "GetStreamingEventsResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetStreamingEventsResponseMessageType",
        "GetStreamingEventsResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetStreamingEventsResponseType",
        "SendNotificationResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SendNotificationResponseMessageType",
        "SendNotificationResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SendNotificationResponseType",
        "SendNotificationResultType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SendNotificationResultType",
        "SyncFolderHierarchyType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderHierarchyType",
        "SyncFolderHierarchyResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderHierarchyResponseMessageType",
        "SyncFolderHierarchyResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderHierarchyResponseType",
        "SyncFolderItemsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderItemsType",
        "SyncFolderItemsResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderItemsResponseMessageType",
        "SyncFolderItemsResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SyncFolderItemsResponseType",
        "GetUserAvailabilityRequestType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetUserAvailabilityRequestType",
        "FreeBusyResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FreeBusyResponseType",
        "ArrayOfFreeBusyResponse" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfFreeBusyResponse",
        "SuggestionsResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SuggestionsResponseType",
        "GetUserAvailabilityResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetUserAvailabilityResponseType",
        "GetUserOofSettingsRequest" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetUserOofSettingsRequest",
        "GetUserOofSettingsResponse" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetUserOofSettingsResponse",
        "SetUserOofSettingsRequest" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SetUserOofSettingsRequest",
        "SetUserOofSettingsResponse" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\SetUserOofSettingsResponse",
        "ConvertIdType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ConvertIdType",
        "ConvertIdResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ConvertIdResponseType",
        "ConvertIdResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ConvertIdResponseMessageType",
        "GetDelegateType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetDelegateType",
        "GetDelegateResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetDelegateResponseMessageType",
        "ArrayOfDelegateUserResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfDelegateUserResponseMessageType",
        "DelegateUserResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DelegateUserResponseMessageType",
        "AddDelegateType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AddDelegateType",
        "BaseDelegateResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseDelegateResponseMessageType",
        "BaseDelegateType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\BaseDelegateType",
        "AddDelegateResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\AddDelegateResponseMessageType",
        "RemoveDelegateType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RemoveDelegateType",
        "RemoveDelegateResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RemoveDelegateResponseMessageType",
        "UpdateDelegateType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UpdateDelegateType",
        "UpdateDelegateResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UpdateDelegateResponseMessageType",
        "GetSharingMetadataType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetSharingMetadataType",
        "GetSharingMetadataResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetSharingMetadataResponseMessageType",
        "RefreshSharingFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RefreshSharingFolderType",
        "RefreshSharingFolderResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\RefreshSharingFolderResponseMessageType",
        "GetSharingFolderType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetSharingFolderType",
        "GetSharingFolderResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetSharingFolderResponseMessageType",
        "CreateUserConfigurationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CreateUserConfigurationType",
        "CreateUserConfigurationResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\CreateUserConfigurationResponseType",
        "DeleteUserConfigurationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteUserConfigurationType",
        "DeleteUserConfigurationResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\DeleteUserConfigurationResponseType",
        "GetUserConfigurationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetUserConfigurationType",
        "GetUserConfigurationResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetUserConfigurationResponseMessageType",
        "GetUserConfigurationResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetUserConfigurationResponseType",
        "UpdateUserConfigurationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UpdateUserConfigurationType",
        "UpdateUserConfigurationResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UpdateUserConfigurationResponseType",
        "GetRoomListsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetRoomListsType",
        "GetRoomListsResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetRoomListsResponseMessageType",
        "GetRoomsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetRoomsType",
        "GetRoomsResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetRoomsResponseMessageType",
        "ArrayOfServiceConfigurationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfServiceConfigurationType",
        "GetServiceConfigurationType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetServiceConfigurationType",
        "GetServiceConfigurationResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetServiceConfigurationResponseMessageType",
        "ArrayOfServiceConfigurationResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ArrayOfServiceConfigurationResponseMessageType",
        "ServiceConfigurationResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\ServiceConfigurationResponseMessageType",
        "FindMessageTrackingReportRequestType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindMessageTrackingReportRequestType",
        "FindMessageTrackingReportResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindMessageTrackingReportResponseMessageType",
        "GetMessageTrackingReportRequestType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetMessageTrackingReportRequestType",
        "GetMessageTrackingReportResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetMessageTrackingReportResponseMessageType",
        "GetInboxRulesRequestType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetInboxRulesRequestType",
        "GetInboxRulesResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\GetInboxRulesResponseType",
        "UpdateInboxRulesRequestType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UpdateInboxRulesRequestType",
        "UpdateInboxRulesResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\UpdateInboxRulesResponseType",
        "FindMailboxStatisticsByKeywordsType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindMailboxStatisticsByKeywordsType",
        "FindMailboxStatisticsByKeywordsResponseType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindMailboxStatisticsByKeywordsResponseType",
        "FindMailboxStatisticsByKeywordsResponseMessageType" => "OroPro\\Bundle\\EwsBundle\\Ews\\EwsType\\FindMailboxStatisticsByKeywordsResponseMessageType",
    );

    /**
     * Initializes the SOAP client to make a request
     *
     * @return \SoapClient
     *
     * @abstract
     */
    abstract protected function initializeSoapClient();

    /**
     * Makes a SOAP call
     *
     * @param string $functionName The name of the SOAP function to call
     * @param array $arguments An array of the arguments to pass to the function
     * @param array $options [optional] An associative array of options to pass to the client
     *        The location option is the URL of the remote Web service
     *        The uri option is the target namespace of the SOAP service
     *        The soapaction option is the action to call
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *
     * @return mixed
     *
     * @abstract
     */
    abstract protected function soapCall(
        $functionName,
        array $arguments,
        array $options = null,
        $input_headers = null,
        array &$output_headers = null
    );

    /**
     * Process a response to verify that it succeeded and take the appropriate action
     *
     * @param mixed $response
     *
     * @return mixed
     *
     * @abstract
     */
    abstract protected function processResponse($response);

    /**
     * Updates 'classmap' option for the SOAP client
     *
     * @param array $options Options for the SoapClient
     *
     */
    protected function updateClassmapOption(&$options)
    {
        foreach (self::$classmap as $wsdlClassName => $phpClassName) {
            if (!isset($options['classmap'][$wsdlClassName])) {
                $options['classmap'][$wsdlClassName] = $phpClassName;
            }
        }
    }

    /**
     * Service Call: ResolveNames
     *
     * @param EwsType\ResolveNamesType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\ResolveNamesResponseType
     */
    public function ResolveNames($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("ResolveNames", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: ExpandDL
     *
     * @param EwsType\ExpandDLType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\ExpandDLResponseType
     */
    public function ExpandDL($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("ExpandDL", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetServerTimeZones
     *
     * @param EwsType\GetServerTimeZonesType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetServerTimeZonesResponseType
     */
    public function GetServerTimeZones($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetServerTimeZones", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: FindFolder
     *
     * @param EwsType\FindFolderType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\FindFolderResponseType
     */
    public function FindFolder($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("FindFolder", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: FindItem
     *
     * @param EwsType\FindItemType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     *            string DateTimePrecision
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\FindItemResponseType
     */
    public function FindItem($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("FindItem", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetFolder
     *
     * @param EwsType\GetFolderType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetFolderResponseType
     */
    public function GetFolder($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetFolder", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: UploadItems
     *
     * @param EwsType\UploadItemsType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\UploadItemsResponseType
     */
    public function UploadItems($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("UploadItems", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: ExportItems
     *
     * @param EwsType\ExportItemsType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\ExportItemsResponseType
     */
    public function ExportItems($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("ExportItems", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: ConvertId
     *
     * @param EwsType\ConvertIdType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\ConvertIdResponseType
     */
    public function ConvertId($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("ConvertId", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: CreateFolder
     *
     * @param EwsType\CreateFolderType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\CreateFolderResponseType
     */
    public function CreateFolder($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("CreateFolder", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: DeleteFolder
     *
     * @param EwsType\DeleteFolderType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\DeleteFolderResponseType
     */
    public function DeleteFolder($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("DeleteFolder", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: EmptyFolder
     *
     * @param EwsType\EmptyFolderType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\EmptyFolderResponseType
     */
    public function EmptyFolder($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("EmptyFolder", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: UpdateFolder
     *
     * @param EwsType\UpdateFolderType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\UpdateFolderResponseType
     */
    public function UpdateFolder($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("UpdateFolder", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: MoveFolder
     *
     * @param EwsType\MoveFolderType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\MoveFolderResponseType
     */
    public function MoveFolder($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("MoveFolder", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: CopyFolder
     *
     * @param EwsType\CopyFolderType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\CopyFolderResponseType
     */
    public function CopyFolder($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("CopyFolder", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: Subscribe
     *
     * @param EwsType\SubscribeType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\SubscribeResponseType
     */
    public function Subscribe($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("Subscribe", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: Unsubscribe
     *
     * @param EwsType\UnsubscribeType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\UnsubscribeResponseType
     */
    public function Unsubscribe($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("Unsubscribe", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetEvents
     *
     * @param EwsType\GetEventsType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetEventsResponseType
     */
    public function GetEvents($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetEvents", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetStreamingEvents
     *
     * @param EwsType\GetStreamingEventsType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetStreamingEventsResponseType
     */
    public function GetStreamingEvents($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetStreamingEvents", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: SyncFolderHierarchy
     *
     * @param EwsType\SyncFolderHierarchyType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\SyncFolderHierarchyResponseType
     */
    public function SyncFolderHierarchy($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("SyncFolderHierarchy", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: SyncFolderItems
     *
     * @param EwsType\SyncFolderItemsType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\SyncFolderItemsResponseType
     */
    public function SyncFolderItems($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("SyncFolderItems", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: CreateManagedFolder
     *
     * @param EwsType\CreateManagedFolderRequestType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\CreateManagedFolderResponseType
     */
    public function CreateManagedFolder($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("CreateManagedFolder", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetItem
     *
     * @param EwsType\GetItemType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     *            string DateTimePrecision
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetItemResponseType
     */
    public function GetItem($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetItem", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: CreateItem
     *
     * @param EwsType\CreateItemType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\CreateItemResponseType
     */
    public function CreateItem($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("CreateItem", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: DeleteItem
     *
     * @param EwsType\DeleteItemType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\DeleteItemResponseType
     */
    public function DeleteItem($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("DeleteItem", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: UpdateItem
     *
     * @param EwsType\UpdateItemType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\UpdateItemResponseType
     */
    public function UpdateItem($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("UpdateItem", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: SendItem
     *
     * @param EwsType\SendItemType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\SendItemResponseType
     */
    public function SendItem($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("SendItem", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: MoveItem
     *
     * @param EwsType\MoveItemType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\MoveItemResponseType
     */
    public function MoveItem($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("MoveItem", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: CopyItem
     *
     * @param EwsType\CopyItemType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\CopyItemResponseType
     */
    public function CopyItem($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("CopyItem", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: CreateAttachment
     *
     * @param EwsType\CreateAttachmentType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\CreateAttachmentResponseType
     */
    public function CreateAttachment($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("CreateAttachment", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: DeleteAttachment
     *
     * @param EwsType\DeleteAttachmentType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\DeleteAttachmentResponseType
     */
    public function DeleteAttachment($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("DeleteAttachment", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetAttachment
     *
     * @param EwsType\GetAttachmentType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetAttachmentResponseType
     */
    public function GetAttachment($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetAttachment", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetDelegate
     *
     * @param EwsType\GetDelegateType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetDelegateResponseMessageType
     */
    public function GetDelegate($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetDelegate", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: AddDelegate
     *
     * @param EwsType\AddDelegateType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\AddDelegateResponseMessageType
     */
    public function AddDelegate($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("AddDelegate", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: RemoveDelegate
     *
     * @param EwsType\RemoveDelegateType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\RemoveDelegateResponseMessageType
     */
    public function RemoveDelegate($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("RemoveDelegate", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: UpdateDelegate
     *
     * @param EwsType\UpdateDelegateType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\UpdateDelegateResponseMessageType
     */
    public function UpdateDelegate($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("UpdateDelegate", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: CreateUserConfiguration
     *
     * @param EwsType\CreateUserConfigurationType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\CreateUserConfigurationResponseType
     */
    public function CreateUserConfiguration($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("CreateUserConfiguration", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: DeleteUserConfiguration
     *
     * @param EwsType\DeleteUserConfigurationType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\DeleteUserConfigurationResponseType
     */
    public function DeleteUserConfiguration($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("DeleteUserConfiguration", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetUserConfiguration
     *
     * @param EwsType\GetUserConfigurationType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetUserConfigurationResponseType
     */
    public function GetUserConfiguration($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetUserConfiguration", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: UpdateUserConfiguration
     *
     * @param EwsType\UpdateUserConfigurationType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\UpdateUserConfigurationResponseType
     */
    public function UpdateUserConfiguration($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("UpdateUserConfiguration", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetUserAvailability
     *
     * @param EwsType\GetUserAvailabilityRequestType $GetUserAvailabilityRequest
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\TimeZoneContextType TimeZoneContext
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetUserAvailabilityResponseType
     */
    public function GetUserAvailability($GetUserAvailabilityRequest, $input_headers = null, array &$output_headers = null)
    {
        $args = array('GetUserAvailabilityRequest' => $GetUserAvailabilityRequest);
        return $this->soapCall("GetUserAvailability", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetUserOofSettings
     *
     * @param EwsType\GetUserOofSettingsRequest $GetUserOofSettingsRequest
     * @param EwsType\RequestServerVersion $RequestVersion
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetUserOofSettingsResponse
     */
    public function GetUserOofSettings($GetUserOofSettingsRequest, $RequestVersion, $input_headers = null, array &$output_headers = null)
    {
        $args = array('GetUserOofSettingsRequest' => $GetUserOofSettingsRequest, 'RequestVersion' => $RequestVersion);
        return $this->soapCall("GetUserOofSettings", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: SetUserOofSettings
     *
     * @param EwsType\SetUserOofSettingsRequest $SetUserOofSettingsRequest
     * @param EwsType\RequestServerVersion $RequestVersion
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\SetUserOofSettingsResponse
     */
    public function SetUserOofSettings($SetUserOofSettingsRequest, $RequestVersion, $input_headers = null, array &$output_headers = null)
    {
        $args = array('SetUserOofSettingsRequest' => $SetUserOofSettingsRequest, 'RequestVersion' => $RequestVersion);
        return $this->soapCall("SetUserOofSettings", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetServiceConfiguration
     *
     * @param EwsType\GetServiceConfigurationType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\MailboxCultureType MailboxCulture
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetServiceConfigurationResponseMessageType
     */
    public function GetServiceConfiguration($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetServiceConfiguration", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetMailTips
     *
     * @param EwsType\GetMailTipsType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\MailboxCultureType MailboxCulture
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetMailTipsResponseMessageType
     */
    public function GetMailTips($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetMailTips", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: PlayOnPhone
     *
     * @param EwsType\PlayOnPhoneType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\PlayOnPhoneResponseMessageType
     */
    public function PlayOnPhone($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("PlayOnPhone", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetPhoneCallInformation
     *
     * @param EwsType\GetPhoneCallInformationType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetPhoneCallInformationResponseMessageType
     */
    public function GetPhoneCallInformation($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetPhoneCallInformation", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: DisconnectPhoneCall
     *
     * @param EwsType\DisconnectPhoneCallType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\DisconnectPhoneCallResponseMessageType
     */
    public function DisconnectPhoneCall($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("DisconnectPhoneCall", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetSharingMetadata
     *
     * @param EwsType\GetSharingMetadataType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetSharingMetadataResponseMessageType
     */
    public function GetSharingMetadata($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetSharingMetadata", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: RefreshSharingFolder
     *
     * @param EwsType\RefreshSharingFolderType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\RefreshSharingFolderResponseMessageType
     */
    public function RefreshSharingFolder($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("RefreshSharingFolder", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetSharingFolder
     *
     * @param EwsType\GetSharingFolderType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetSharingFolderResponseMessageType
     */
    public function GetSharingFolder($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetSharingFolder", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetRoomLists
     *
     * @param EwsType\GetRoomListsType $GetRoomListsRequest
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetRoomListsResponseMessageType
     */
    public function GetRoomLists($GetRoomListsRequest, $input_headers = null, array &$output_headers = null)
    {
        $args = array('GetRoomListsRequest' => $GetRoomListsRequest);
        return $this->soapCall("GetRoomLists", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetRooms
     *
     * @param EwsType\GetRoomsType $GetRoomsRequest
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetRoomsResponseMessageType
     */
    public function GetRooms($GetRoomsRequest, $input_headers = null, array &$output_headers = null)
    {
        $args = array('GetRoomsRequest' => $GetRoomsRequest);
        return $this->soapCall("GetRooms", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: FindMessageTrackingReport
     *
     * @param EwsType\FindMessageTrackingReportRequestType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\FindMessageTrackingReportResponseMessageType
     */
    public function FindMessageTrackingReport($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("FindMessageTrackingReport", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetMessageTrackingReport
     *
     * @param EwsType\GetMessageTrackingReportRequestType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetMessageTrackingReportResponseMessageType
     */
    public function GetMessageTrackingReport($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetMessageTrackingReport", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: FindConversation
     *
     * @param EwsType\FindConversationType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\FindConversationResponseMessageType
     */
    public function FindConversation($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("FindConversation", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: ApplyConversationAction
     *
     * @param EwsType\ApplyConversationActionType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\ApplyConversationActionResponseType
     */
    public function ApplyConversationAction($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("ApplyConversationAction", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetInboxRules
     *
     * @param EwsType\GetInboxRulesRequestType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetInboxRulesResponseType
     */
    public function GetInboxRules($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetInboxRules", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: UpdateInboxRules
     *
     * @param EwsType\UpdateInboxRulesRequestType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\ExchangeImpersonationType Impersonation
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     *            EwsType\TimeZoneContextType TimeZoneContext
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\UpdateInboxRulesResponseType
     */
    public function UpdateInboxRules($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("UpdateInboxRules", $args, null, $input_headers, $output_headers);
    }

    /**
     * Service Call: GetPasswordExpirationDate
     *
     * @param EwsType\GetPasswordExpirationDateType $request
     * @param mixed $input_headers [optional] An array of headers to be sent along with the SOAP request
     *        acceptable headers:
     *            EwsType\MailboxCultureType MailboxCulture
     *            EwsType\RequestServerVersion RequestVersion
     * @param array $output_headers [optional] If supplied, this array will be filled with the headers from the SOAP response
     *        possible headers:
     *            EwsType\ServerVersionInfo ServerVersion
     *
     * @return EwsType\GetPasswordExpirationDateResponseMessageType
     */
    public function GetPasswordExpirationDate($request, $input_headers = null, array &$output_headers = null)
    {
        $args = array('request' => $request);
        return $this->soapCall("GetPasswordExpirationDate", $args, null, $input_headers, $output_headers);
    }
}
