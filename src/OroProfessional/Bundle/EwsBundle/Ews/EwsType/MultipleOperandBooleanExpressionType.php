<?php

namespace OroProfessional\Bundle\EwsBundle\Ews\EwsType;

// @codingStandardsIgnoreStart
/**
 * MultipleOperandBooleanExpressionType
 *
 * @ignore This code was generated by a tool.
 *         Changes to this file may cause incorrect behaviour and will be lost if
 *         the code is regenerated.
 * @SuppressWarnings(PHPMD)
 */
class MultipleOperandBooleanExpressionType extends SearchExpressionType
{
    /**
     * @var ContainsExpressionType[]
     * @access public
     */
    public $Contains;

    /**
     * @var ExcludesType[]
     * @access public
     */
    public $Excludes;

    /**
     * @var ExistsType[]
     * @access public
     */
    public $Exists;

    /**
     * @var IsEqualToType[]
     * @access public
     */
    public $IsEqualTo;

    /**
     * @var IsNotEqualToType[]
     * @access public
     */
    public $IsNotEqualTo;

    /**
     * @var IsGreaterThanType[]
     * @access public
     */
    public $IsGreaterThan;

    /**
     * @var IsGreaterThanOrEqualToType[]
     * @access public
     */
    public $IsGreaterThanOrEqualTo;

    /**
     * @var IsLessThanType[]
     * @access public
     */
    public $IsLessThan;

    /**
     * @var IsLessThanOrEqualToType[]
     * @access public
     */
    public $IsLessThanOrEqualTo;

    /**
     * The name was changed based on a name map provided to the PHP code generation tool
     *
     * @var AndType[]
     * @access public
     */
    public $AndExpr;

    /**
     * The name was changed based on a name map provided to the PHP code generation tool
     *
     * @var NotType[]
     * @access public
     */
    public $NotExpr;

    /**
     * The name was changed based on a name map provided to the PHP code generation tool
     *
     * @var OrType[]
     * @access public
     */
    public $OrExpr;

    private $_parameterMap = array (
        "And" => "AndExpr",
        "Not" => "NotExpr",
        "Or" => "OrExpr",
    );
    /**
     * Provided for getting non-php-standard named variables
     * @param string $var The variable name to get
     * @return mixed The variable value
     */
    public function __get($var)
    {
        return $this->{$this->_parameterMap[$var]};
    }

    /**
     * Provided for setting non-php-standard named variables
     * @param string $var The variable name to set
     * @param mixed $value The value to set
     */
    public function __set($var, $value)
    {
        $this->{$this->_parameterMap[$var]} = $value;
    }
}
// @codingStandardsIgnoreEnd
