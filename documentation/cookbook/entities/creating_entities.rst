How to Create Entities
======================

When working with the OroPlatform, creating entities and map them to the database is not different
from doing the same in a common Symfony application. After you have created your bundle, create the
entity classes you need in the bundle's ``Entity`` namespace, add all the needed properties, and
add the needed mapping annotations as usual.

A task is composed of a brief subject, a more verbose description, a due date, and a priority.
Also, each task is identified by a unique identifier that will be automatically generated by the
database:

.. code-block:: php
    :linenos:

    // src/AppBundle/Entity/Task.php
    namespace AppBundle\Entity;

    use Doctrine\ORM\Mapping as ORM;

    /**
     * @ORM\Entity()
     * @ORM\Table(name="app_task")
     */
    class Task
    {
        /**
         * @ORM\Id()
         * @ORM\GeneratedValue(strategy="AUTO")
         * @ORM\Column(type="integer")
         *
         * @var int
         */
        private $id;

        /**
         * @ORM\Column(type="string")
         *
         * @var string
         */
        private $subject;

        /**
         * @ORM\Column(type="text")
         *
         * @var string
         */
        private $description;

        /**
         * @ORM\Column(type="datetime", name="due_date")
         *
         * @var \DateTime
         */
        private $dueDate;

        /**
         * @ORM\ManyToOne(targetEntity="Priority")
         * @ORM\JoinColumn(name="task_priority_id", onDelete="SET NULL")
         *
         * @var Priority
         */
        private $priority;

        /**
         * Returns the id.
         *
         * @return int
         */
        public function getId()
        {
            return $this->id;
        }

        /**
         * Returns the subject.
         *
         * @return string
         */
        public function getSubject()
        {
            return $this->subject;
        }

        /**
         * Sets the subject.
         *
         * @param string $subject
         */
        public function setSubject($subject)
        {
            $this->subject = $subject;
        }

        /**
         * Returns the description.
         *
         * @return string
         */
        public function getDescription()
        {
            return $this->description;
        }

        /**
         * Sets the description.
         *
         * @param string $description
         */
        public function setDescription($description)
        {
            $this->description = $description;
        }

        /**
         * Returns the due date.
         *
         * @return \DateTime
         */
        public function getDueDate()
        {
            return $this->dueDate;
        }

        /**
         * Sets the due date.
         *
         * @param \DateTime $dueDate
         */
        public function setDueDate(\DateTime $dueDate)
        {
            $this->dueDate = $dueDate;
        }

        /**
         * Returns the priority.
         *
         * @return Priority
         */
        public function getPriority()
        {
            return $this->priority;
        }

        /**
         * Sets the priority.
         *
         * @param Priority $priority
         */
        public function setPriority(Priority $priority)
        {
            $this->priority = $priority;
        }
    }

Users should be able to create and change priorities through the user interface. Thus, they are
modeled as separate entities:

.. code-block:: php
    :linenos:

    // src/AppBundle/Entity/Priority.php
    namespace AppBundle\Entity;

    use Doctrine\ORM\Mapping as ORM;

    /**
     * @ORM\Entity()
     * @ORM\Table(name="app_task_priority")
     */
    class Priority
    {
        /**
         * @ORM\Id()
         * @ORM\GeneratedValue(strategy="AUTO")
         * @ORM\Column(type="integer")
         *
         * @var int
         */
        private $id;

        /**
         * @ORM\Column(type="string", unique=true)
         *
         * @var string
         */
        private $label;

        /**
         * Returns the priority id.
         *
         * @return int
         */
        public function getId()
        {
            return $this->id;
        }

        /**
         * Returns the label.
         *
         * @return string
         */
        public function getLabel()
        {
            return $this->label;
        }

        /**
         * Changes the priority label.
         *
         * @param string $label
         */
        public function setLabel($label)
        {
            $this->label = $label;
        }
    }

.. caution::

    Do not use the ``doctrine:schema:update`` command with your production database. Instead,
    create migrations to update the schema of your database. You can read more about how to use
    migrations :ref:`in the book <book-entities-database-schema-update>`.

After you have modeled your entities, you need to update the database schema. This can be done by
using the ``doctrine:schema:update`` command. Use the ``--dump-sql`` option to first make sure that
Doctrine will actually make the expected changes:

.. code-block:: bash

    $ php app/console doctrine:schema:update --dump-sql

If the command displays something you did not expect, double check the configured mapping
information and run the command again.

When everything displays as expected, update the database schema by passing the ``--force`` option:

.. code-block:: bash

    $ php app/console doctrine:schema:update --force

.. tip::

    Doctrine caches mapping metadata. If the ``doctrine:schema:update`` command does not recognize
    your changes to the entity mapping, you can clear the metadata cache manually and try to update
    the schema again:

    .. code-block:: bash

        # clear the metadata cache
        $ php app/console doctrine:cache:clear-metadata

        # check the schema change queries to be executed
        $ php app/console doctrine:schema:update --dump-sql

        # apply the schema changes to the database
        $ php app/console doctrine:schema:update --force
